
%%{init: {'theme':'forest'}}%%

sequenceDiagram

    Title Sequence diagram of .main() of /src/gtp/pipelines/train.py

    participant p1 as main()<br>:pipelines/train.py/train.py
    participant p2 as TrainingOptions<br>:options/base.py/BaseOptions
    participant p3 as <br>:configs/loaders.py/loaders.py
    participant p4 as <br>:pipelines/train.py/train.py
    participant p5 as <br>:tools/simple.py/simple.py
    participant p6 as <br>:dataloading/path_collectors.py/path_collectors.py
    participant p7 as logger<br>:tools/logging.py/ExperimentLogger
    participant p8 as <br>:dataloading/data_collectors.py/data_collectors.py
    participant p9 as <br>:tools/timing.py/timing.py
    participant p10 as <br>:dataloading/tools.py/tools.py
    participant p11 as training_loop<br>:trainers/training_loops.py/BasicTrainingLoop
    participant p12 as scheduler<br>:models/scheduler.py/Scheduler
    participant p13 as scheduler<br>:models/scheduler.py/NoScheduler
    participant p14 as training_tracker<br>:trainers/trackers.py/TrainingTracker
    participant p15 as <br>:evaluation.py/evaluation.py
    participant p16 as <br>:models/forward.py/forward.py


	p1 ->>+ p2: 1: click_options()
	p2 -->>- p1: 1: return value
	p1 ->>+ p3: 2: load_configs(configs)
	p3 -->>- p1: 2: return value
	p1 ->>+ p4: 3: train(cfgs, opts)
	p4 ->>+ p5: 3.1: create_exp_info_text( species=options.species,<br>wing=options.wing,<br>color=options.color,<br>chromosome=options.chromosome,<br> )
	p5 -->>- p4: 3.1: return value
	p4 ->>+ p6: 3.2: get_results_training_output_directory(configs.io)
	p6 ->>+ p6: 3.2.1: _select_override_if_exists(io_cfgs.default_root, io_cfgs.<br>results.root)
	p6 -->>- p6: 3.2.1: return value
	p6 -->>- p4: 3.2: return value
	p4 ->>+ p7: 3.3: get_log_location()
	p7 -->>- p4: 3.3: return value
	p4 ->>+ p7: 3.4: get_log_location(log_name="DONE")
	p7 -->>- p4: 3.4: return value
	p4 ->>+ p8: 3.5: load_training_data(configs, options)
	p8 ->>+ p9: 3.5.1: profile_exe_time(verbose=False)
	p9 -->>- p8: 3.5.1: return value
	p8 ->>+ p8: 3.5.2: load_chromosome_and_phenotype_data(configs, options)
	p8 ->>+ p6: 3.5.2.1: get_post_processed_genotype_directory(configs.io)
	p6 ->>+ p6: 3.5.2.1.1: _select_override_if_exists( io_cfgs.default_root,<br>io_cfgs.data_post_process.root<br> )
	p6 -->>- p6: 3.5.2.1.1: return value
	p6 -->>- p8: 3.5.2.1: return value
	p8 ->>+ p6: 3.5.2.2: get_post_processed_phenotype_directory(configs.io)
	p6 ->>+ p6: 3.5.2.2.1: _select_override_if_exists( io_cfgs.default_root,<br>io_cfgs.data_post_process.root<br> )
	p6 -->>- p6: 3.5.2.2.1: return value
	p6 -->>- p8: 3.5.2.2: return value
	p8 ->>+ p10: 3.5.2.3: load_chromosome_data( genotype_folder / configs.experiment.<br>.genotype_scope,<br>phenotype_folder, options.<br>.species,            options.wing,<br>,            options.color,<br>options.chromosome,<br>   )
	p10 ->>+ p9: 3.5.2.3.1: profile_exe_time(verbose=False)
	p9 -->>- p10: 3.5.2.3.1: return value
	p10 ->>+ p10: 3.5.2.3.2: load_phenotype_data(phenotype_folder, species,<br>wing, color)
	Note right of p10: Further calls ignored for reaching max depth
	p10 -->>- p10: 3.5.2.3.2: return value
	p10 ->>+ p10: 3.5.2.3.3: collect_chromosome( genotype_folder, species,<br>chromosome )
	Note right of p10: Further calls ignored for reaching max depth
	p10 -->>- p10: 3.5.2.3.3: return value
	p10 ->>+ p10: 3.5.2.3.4: align_genotype_and_phenotype_data( pca_camids, genotype_camids, pca_data,<br>genotype_data )
	Note right of p10: Further calls ignored for reaching max depth
	p10 -->>- p10: 3.5.2.3.4: return value
	p10 -->>- p8: 3.5.2.3: return value
	p8 -->>- p8: 3.5.2: return value
	p8 ->>+ p6: 3.5.3: get_results_training_metadata_directory(configs.io)
	p6 ->>+ p6: 3.5.3.1: _select_override_if_exists(io_cfgs.default_root, io_cfgs.<br>results.root)
	p6 -->>- p6: 3.5.3.1: return value
	p6 -->>- p8: 3.5.3: return value
	p8 ->>+ p10: 3.5.4: split_data_by_file( genotype_data_aligned,<br>phenotype_data_aligned,<br>camids_aligned, metadata_folder,<br>        options.species,    )
	p10 -->>- p8: 3.5.4: return value
	p8 -->>- p4: 3.5: return value
	p4 ->>+ p7: 3.6: log(f"Input size: {num_vcfs}")
	p7 ->>+ p7: 3.6.1: get_log_location(log_name=log_name)
	p7 -->>- p7: 3.6.1: return value
	p7 -->>- p4: 3.6: return value
	p4 ->>+ p7: 3.7: log(f"Number of out dimensions used:<br>{options.out_dims}")
	p7 ->>+ p7: 3.7.1: get_log_location(log_name=log_name)
	p7 -->>- p7: 3.7.1: return value
	p7 -->>- p4: 3.7: return value
	p4 ->>+ p4: 3.8: train_model( options, train_dataloader,<br>val_dataloader, model=model,<br>logger=logger )
	p4 ->>+ p4: 3.8.1: get_optimizer(options.optimizer, options.lr,<br>model.parameters())
	p4 -->>- p4: 3.8.1: return value
	p4 ->>+ p11: 3.8.2: train( tr_dloader, model=lambda<br>batch: model(batch[0].cuda()),<br>loss_fn=lambda output,<br>, batch: F.mse_loss(batch[1].cuda(<br>(), output),<br>optimizer=optimizer,<br>tracker=training_tracker,<br>   )
	p11 -->>- p4: 3.8.2: return value
	p4 ->>+ p12: 3.8.3: step()
	p12 ->>+ p13: 3.8.3.1: step(*args, **kwargs)
	p13 -->>- p12: 3.8.3.1: return value
	p12 -->>- p4: 3.8.3: return value
	p4 ->>+ p11: 3.8.4: test( val_dloader, model=lambda<br>batch: model(batch[0].cuda()),<br>loss_fn=lambda output,<br>, batch: F.mse_loss(batch[1].cuda(<br>(), output),<br>tracker=training_tracker,<br>  )
	p11 -->>- p4: 3.8.4: return value
	p4 ->>+ p14: 3.8.5: reset_data_storage()
	p14 -->>- p4: 3.8.5: return value
	p4 ->>+ p4: 3.8.6: calc_pearson_correlation(model, val_dloader)
	p4 -->>- p4: 3.8.6: return value
	p4 ->>+ p7: 3.8.7: log("Saving Model")
	p7 ->>+ p7: 3.8.7.1: get_log_location(log_name=log_name)
	p7 -->>- p7: 3.8.7.1: return value
	p7 -->>- p4: 3.8.7: return value
	p4 ->>+ p7: 3.8.8: log("Saving Model")
	p7 ->>+ p7: 3.8.8.1: get_log_location(log_name=log_name)
	p7 -->>- p7: 3.8.8.1: return value
	p7 -->>- p4: 3.8.8: return value
	p4 ->>+ p4: 3.8.9: rs(avg_train_rmse)
	p4 -->>- p4: 3.8.9: return value
	p4 ->>+ p4: 3.8.10: rs(avg_val_rmse)
	p4 -->>- p4: 3.8.10: return value
	p4 ->>+ p4: 3.8.11: rs(best_diff_e)
	p4 -->>- p4: 3.8.11: return value
	p4 ->>+ p4: 3.8.12: rs(worst_diff_e)
	p4 -->>- p4: 3.8.12: return value
	p4 ->>+ p7: 3.8.13: log(out_str)
	p7 ->>+ p7: 3.8.13.1: get_log_location(log_name=log_name)
	p7 -->>- p7: 3.8.13.1: return value
	p7 -->>- p4: 3.8.13: return value
	p4 -->>- p4: 3.8: return value
	p4 ->>+ p7: 3.9: log(f"Total training time: {total_duration:<br>.2f}s")
	p7 ->>+ p7: 3.9.1: get_log_location(log_name=log_name)
	p7 -->>- p7: 3.9.1: return value
	p7 -->>- p4: 3.9: return value
	p4 ->>+ p7: 3.10: log("Testing")
	p7 ->>+ p7: 3.10.1: get_log_location(log_name=log_name)
	p7 -->>- p7: 3.10.1: return value
	p7 -->>- p4: 3.10: return value
	p4 ->>+ p15: 3.11: test( train_dataloader,<br>val_dataloader, test_dataloader,<br>,        model,        options.out_dims,<br>,        options.out_dims_start_idx,<br>    )
	p15 ->>+ p16: 3.11.1: forward_step( model, batch,<br>None,<br>out_dims,<br>out_start_idx=out_dims_start_idx,<br>,                is_train=False,<br>            )
	p16 -->>- p15: 3.11.1: return value
	p15 -->>- p4: 3.11: return value
	p4 ->>+ p7: 3.12: log(f"Train RMSE: {rmses[0]} | Val<br>RMSE: {rmses[1]} | Test RMSE:<br>{rmses[2]}")
	p7 ->>+ p7: 3.12.1: get_log_location(log_name=log_name)
	p7 -->>- p7: 3.12.1: return value
	p7 -->>- p4: 3.12: return value
	p4 ->>+ p4: 3.13: plot_loss_curves(train_losses, val_losses,<br>logger.outdir)
	p4 -->>- p4: 3.13: return value
	p4 ->>+ p7: 3.14: log("Completed!", log_name="DONE")
	p7 ->>+ p7: 3.14.1: get_log_location(log_name=log_name)
	p7 -->>- p7: 3.14.1: return value
	p7 -->>- p4: 3.14: return value
	p4 -->>- p1: 3: return value
        